<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name "DiskSpaceManagement">
<!ENTITY author "strike">
<!ENTITY version "2025.07.22">
<!ENTITY launch "Settings/DiskSpaceManagement">
<!ENTITY plugdir "/boot/config/plugins/&name;">
<!ENTITY pluginURL "https://raw.githubusercontent.com/strike84/unraid-disk.space.management/refs/heads/main/DiskSpaceManagement.plg">
]>
<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" icon="fa-hdd-o">

<!--
  PRE-INSTALL SCRIPT
  This block is executed by Unraid before install
  Its purpose is to clean up files from previous versions to ensure a clean installation.
-->
<FILE Run="/bin/bash">
<INLINE>
# Remove the plugin's directory from RAM. This ensures no old UI files are left behind.
rm -rf /usr/local/emhttp/plugins/&name;

# Remove the plugin's cron file. The plugin will recreate this later based on current settings.
rm -rf /boot/config/plugins/dynamix/&name;.cron

</INLINE>
</FILE>

<!--
  WEB UI FILES
  These files constitute the plugin's user interface and are installed into RAM.
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/&name;.page" Mode="0755">
<INLINE>
<![CDATA[
Menu="Utilities"
Title="Disk Space Management"
Icon="hdd-o"
---
<?php
require_once('/usr/local/emhttp/plugins/DiskSpaceManagement/engine.php');
?>
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/&name;/engine.php" Mode="0644">
<INLINE>
<![CDATA[
<?php
// Define constants
define('PLUGIN_NAME', 'DiskSpaceManagement');
define('PLUGIN_VERSION', '2025.07.22');
define('CONFIG_PATH', '/boot/config/plugins/' . PLUGIN_NAME);
define('CONFIG_FILE', CONFIG_PATH . '/settings.cfg');

// Variable to hold a success message after saving
$update_message = "";

// Function to read a setting value and escape it for safe HTML output
function get_config_val($key, $default = '') {
    if (!file_exists(CONFIG_FILE)) {
        return htmlspecialchars($default, ENT_QUOTES, 'UTF-8');
    }
    $config = parse_ini_file(CONFIG_FILE, false, INI_SCANNER_RAW);
    $value = $config[$key] ?? $default;
    return htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
}

// Handle POST request to save settings.
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['save_settings'])) {
    if (!is_dir(CONFIG_PATH)) {
        mkdir(CONFIG_PATH, 0770, true);
    }
    
    // Load the old settings for comparison
    $old_config = file_exists(CONFIG_FILE) ? parse_ini_file(CONFIG_FILE, false, INI_SCANNER_RAW) : [];
    
    $new_config = $_POST;
    unset($new_config['save_settings']);

    // Determine what changed
    $cron_changed = ($old_config['CRON_SCHEDULE'] ?? null) !== ($new_config['CRON_SCHEDULE'] ?? null);
    
    $old_other_settings = $old_config;
    if (isset($old_other_settings['CRON_SCHEDULE'])) unset($old_other_settings['CRON_SCHEDULE']);
    $new_other_settings = $new_config;
    if (isset($new_other_settings['CRON_SCHEDULE'])) unset($new_other_settings['CRON_SCHEDULE']);
    $other_settings_changed = $old_other_settings !== $new_other_settings;

    // Save the new settings
    $cfg_content = "";
    foreach($new_config as $key => $value) {
        $escaped_value = str_replace('"', '\"', $value);
        $cfg_content .= $key . '="' . $escaped_value . '"' . PHP_EOL;
    }
    file_put_contents(CONFIG_FILE, $cfg_content);

    // Update cron if its schedule changed
    if ($cron_changed) {
        $cron_schedule = $new_config['CRON_SCHEDULE'] ?? '0 3 * * *';
        $log_file = $new_config['LOG_FILE'] ?? '/var/log/diskspacemanagement.log';
        $script_path = "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/scripts/disk_space_management.sh";
        $command = "/bin/bash " . escapeshellarg($script_path);
        
        $cron_file_path = "/boot/config/plugins/dynamix/" . PLUGIN_NAME . ".cron";
        
        $wrong_cron_path = CONFIG_PATH . "/" . PLUGIN_NAME . ".cron";
        if (file_exists($wrong_cron_path)) {
            unlink($wrong_cron_path);
        }

        if (strtolower($cron_schedule) === 'disabled') {
            if (file_exists($cron_file_path)) {
                unlink($cron_file_path);
            }
        } else {
            // The script now handles its own logging, so we don't need redirection here.
            $cron_content = "# Auto-generated cron job for DiskSpaceManagement" . PHP_EOL;
            $cron_content .= "$cron_schedule $command" . PHP_EOL;
            file_put_contents($cron_file_path, $cron_content);
        }
        
        exec("update_cron");
    }

    // Set the appropriate success message
    if ($cron_changed && $other_settings_changed) {
        $update_message = "Settings saved, cron schedule successfully updated.";
    } elseif ($cron_changed) {
        $update_message = "Cron schedule successfully updated.";
    } elseif ($other_settings_changed) {
        $update_message = "Settings saved.";
    } else {
        $update_message = "No changes were made.";
    }
}
?>
<style>
    .log-container { background-color: #2b2b2b; color: #f1f1f1; font-family: monospace; white-space: pre-wrap; word-wrap: break-word; padding: 15px; border-radius: 5px; height: 500px; overflow-y: scroll; border: 1px solid #444; }
    .success-message { padding: 10px; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; border-radius: 5px; margin-bottom: 15px; }
</style>
<div id="diskspacemanagement">
    <div style="display:flex; justify-content:space-between; align-items:center;">
        <div>
            <h2>Disk Space Management <span style="font-size: 0.8em; color: #999;"><?= PLUGIN_VERSION ?></span></h2>
            <p>Automated disk space management for your media library.</p>
        </div>
    </div>
    
    <?php if (!empty($update_message)): ?>
        <div class="success-message">
            <?= htmlspecialchars($update_message) ?>
        </div>
    <?php endif; ?>

    <div class="tabs">
        <button class="tab-button active" onclick="showTab('settings')">Settings</button>
        <button class="tab-button" onclick="showTab('logs')">Logs</button>
        <button class="tab-button" onclick="showTab('about')">About</button>
    </div>

    <div id="tab-settings" class="tab-content" style="display: block;">
        <form id="diskspacemanagement_form" method="post" action="">
            <input type="hidden" name="save_settings" value="true">
            <dl>
                <dt>Free Space Threshold (GB)</dt>
                <dd><input type="number" name="THRESHOLD_GB" value="<?= get_config_val('THRESHOLD_GB', '100') ?>" size="5"></dd>
                <blockquote class="inline_help"><p>The script will start moving files from any disk with free space below this value.</p></blockquote>
                
                <dt>Dry Run</dt>
                <dd>
                  <select name="DRY_RUN">
                    <option value="true" <?= get_config_val('DRY_RUN', 'true') == 'true' ? 'selected' : '' ?>>Enabled</option>
                    <option value="false" <?= get_config_val('DRY_RUN', 'true') == 'false' ? 'selected' : '' ?>>Disabled</option>
                  </select>
                </dd>
                <blockquote class="inline_help"><p>When enabled, the script will log what it would do without actually moving any files. Recommended for testing.</p></blockquote>

                <dt>Send Notifications</dt>
                <dd>
                  <select name="NOTIFY">
                    <option value="true" <?= get_config_val('NOTIFY', 'true') == 'true' ? 'selected' : '' ?>>Yes</option>
                    <option value="false" <?= get_config_val('NOTIFY', 'true') == 'false' ? 'selected' : '' ?>>No</option>
                  </select>
                </dd>
                <blockquote class="inline_help"><p>Send a notification to the Unraid UI when the script starts and finishes.</p></blockquote>

                <dt>Log File Path</dt>
                <dd><input type="text" name="LOG_FILE" value="<?= get_config_val('LOG_FILE', '/var/log/diskspacemanagement.log') ?>" size="60"></dd>
                <blockquote class="inline_help"><p>Path to store the script execution log. If you want persistent logs store it on the cache drive or flash drive.</p></blockquote>

                <dt>Movie Library Paths</dt>
                <dd><input type="text" name="MOVIE_DIRS" value="<?= get_config_val('MOVIE_DIRS', 'media/Movies') ?>" size="60"></dd>
                <blockquote class="inline_help"><p>Comma-separated list of paths, relative to the disk root (e.g., media/Movies,media/4K_Movies).</p></blockquote>

                <dt>TV Show Library Paths</dt>
                <dd><input type="text" name="TV_SHOW_DIRS" value="<?= get_config_val('TV_SHOW_DIRS', 'media/TV') ?>" size="60"></dd>
                <blockquote class="inline_help"><p>Comma-separated list of paths, relative to the disk root (e.g., media/TV Shows,media/Kid Shows</p></blockquote>
                
                <dt>Excluded Disks</dt>
                <dd><input type="text" name="EXCLUDED_DISKS" value="<?= get_config_val('EXCLUDED_DISKS', '') ?>" size="60"></dd>
                <blockquote class="inline_help"><p>Comma-separated list of full disk paths to exclude from all operations (e.g. /mnt/disk1,/mnt/disk2).</p></blockquote>

                <dt>Cron Schedule</dt>
                <dd>
                <input type="text" name="CRON_SCHEDULE" value="<?= get_config_val('CRON_SCHEDULE', '0 3 * * *') ?>" size="60"></dd>
                <blockquote class="inline_help"><p>Standard cron format for automatic execution. Enter "disabled" to turn off. Example: '0 3 * * *' runs at 3:00 AM every day. See this link if you need help figuering out what to put here: https://crontab.guru/#0_3_*_*_* It's recommended to set the cron schedule to a time when you know the mover has finished.</p></blockquote>
                </dd>
            </dl>
            <div id="buttons" style="margin-top: 20px;">
              <input type="button" value="Run Script Now" onclick="runScript()">
              <input type="submit" value="Apply">
            </div>
        </form>
    </div>
    <div id="tab-logs" class="tab-content" style="display: none;">
        <h3>Script Log</h3>
        <p>This log shows the output from the log file specified in the settings. It will auto-refresh every 10 seconds while this tab is active.</p>
        <div id="log-content" class="log-container">Loading log...</div>
    </div>
    <div id="tab-about" class="tab-content" style="display: none;">
        <h3>About Disk Space Management</h3>
        <p>For more information about each setting click the help button in the top right corner of the UnRaid web ui. This plugin was created mainly for those who use the split-level feature in Unraid. Due to how split level works, it will ignore the minimum free space setting and continue to move stuff to disks that are full/almost full. This is because split level tries to keep files and folders that belong together based on your split level setting on the same disk, and split level trumps all other settings. Even if there's little space left on the disk. So to combat this, this plugin will automatically move Movies and TV shows from disks that are below the threshold setting to the disk with the most free space available. It prioritizes to move movies first, then if no movies are found it will go to TV shows and move the shows with the fewest seasons first. It's recommended to set the cron schedule to a time when you know the mover has finished.</p>
        <p><strong>Version:</strong> <?= PLUGIN_VERSION ?></p>
    </div>
</div>
<div id="progress_iframe_container" style="display:none; margin-top:20px;">
    <h3>Script Output</h3>
    <iframe name="progress_iframe" style="width:100%; height: 500px; border: 1px solid #ccc; border-radius: 5px; background-color: #2b2b2b;"></iframe>
</div>
<script>
function showTab(tabName){$('.tab-content').hide();$('#tab-'+tabName).show();$('.tab-button').removeClass('active');$('button[onclick="showTab(\''+tabName+'\')"]').addClass('active');if(tabName==='logs'){updateLog();}}
function runScript(){$('#progress_iframe_container').show();$('iframe[name="progress_iframe"]').attr('src','/plugins/<?=PLUGIN_NAME?>/run_handler.php');}
function updateLog(){$.get('/plugins/<?=PLUGIN_NAME?>/log_handler.php',function(data){$('#log-content').text(data).scrollTop($('#log-content')[0].scrollHeight);});}
setInterval(function(){if($('#tab-logs').is(':visible')){updateLog();}},10000);
$(document).ready(function(){showTab('settings');});
</script>
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/&name;/log_handler.php" Mode="0770">
<INLINE>
<![CDATA[
<?php
define('PLUGIN_NAME', 'DiskSpaceManagement');
define('CONFIG_PATH', '/boot/config/plugins/' . PLUGIN_NAME);
define('CONFIG_FILE', CONFIG_PATH . '/settings.cfg');
define('LOG_FILE_PATH_CONFIG_KEY', 'LOG_FILE');

header('Content-Type: text/plain');

$raw_config = file_exists(CONFIG_FILE) ? parse_ini_file(CONFIG_FILE, false, INI_SCANNER_RAW) : [];
$logFile = $raw_config[LOG_FILE_PATH_CONFIG_KEY] ?? '/var/log/diskspacemanagement.log';

if (file_exists($logFile)) {
    echo file_get_contents($logFile);
} else {
    echo "Log file not found at " . htmlspecialchars($logFile) . ". Please run the script at least once to generate it.";
}
?>
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/&name;/run_handler.php" Mode="0770">
<INLINE>
<![CDATA[
<?php
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            background-color: #2b2b2b;
            color: #f1f1f1;
            font-family: monospace;
            margin: 10px;
            white-space: pre;
        }
    </style>
</head>
<body>
<?php
echo "Starting Disk Space Management script...\n\n";
flush();
ob_flush();

$script_path = "/usr/local/emhttp/plugins/DiskSpaceManagement/scripts/disk_space_management.sh";

passthru("/bin/bash " . escapeshellarg($script_path));

echo "\n\nScript finished.";
?>
</body>
</html>
]]>
</INLINE>
</FILE>

<!-- Create the scripts directory -->
<EXEC>
/bin/mkdir -p /usr/local/emhttp/plugins/&name;/scripts
</EXEC>

<!-- The main shell script -->
<FILE Name="/usr/local/emhttp/plugins/&name;/scripts/disk_space_management.sh" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
# ==============================================================================
# Unraid Disk Space Management Script
# ==============================================================================

# --- Environment ---
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# --- Configuration ---
CONFIG_FILE="/boot/config/plugins/DiskSpaceManagement/settings.cfg"

# Set default values for all settings first.
THRESHOLD_GB="50"
DRY_RUN="true"
LOG_FILE="/var/log/diskspacemanagement.log"
MOVIE_DIRS="share/Movies"
TV_SHOW_DIRS="share/TV"
EXCLUDED_DISKS=""
NOTIFY="true"

# Load settings from the config file, which will overwrite the defaults if present.
if [ -f "$CONFIG_FILE" ];
then
    source "$CONFIG_FILE"
fi

# Reformat arrays from config, handling empty settings correctly.
if [ -n "$MOVIE_DIRS" ]; then
    IFS=',' read -r -a MOVIE_DIRS_ARRAY <<< "$MOVIE_DIRS"
else
    MOVIE_DIRS_ARRAY=()
fi

if [ -n "$TV_SHOW_DIRS" ]; then
    IFS=',' read -r -a TV_SHOW_DIRS_ARRAY <<< "$TV_SHOW_DIRS"
else
    TV_SHOW_DIRS_ARRAY=()
fi

if [ -n "$EXCLUDED_DISKS" ]; then
    IFS=',' read -r -a EXCLUDED_DISKS_ARRAY <<< "$EXCLUDED_DISKS"
else
    EXCLUDED_DISKS_ARRAY=()
fi

# --- Script Logic ---
LAST_MOVE_SIZE_GB=0

log_message() {
    local message
    message="$(date +'%Y-%m-%d %H:%M:%S') - $1"
    echo "$message"
}

send_notification() {
    if [ "$NOTIFY" = "true" ];
then
        /usr/local/emhttp/plugins/dynamix/scripts/notify -s "Disk Space Management" -d "$1"
    fi
}

is_disk_excluded() {
    local disk_to_check="$1"
    if [ ${#EXCLUDED_DISKS_ARRAY[@]} -eq 0 ]; then
        return 1
    fi
    local normalized_disk_to_check="${disk_to_check#/}"
    for excluded in "${EXCLUDED_DISKS_ARRAY[@]}";
    do
        local normalized_excluded="${excluded#/}"
        if [[ -z "${normalized_excluded// }" ]]; then
            continue
        fi
        if [[ "$normalized_disk_to_check" == "$normalized_excluded" ]];
        then
            return 0
        fi
    done
    return 1
}

get_folder_size_gb() {
    local folder_path="$1"
    local size_gb
    size_gb=$(du -sBG "$folder_path" 2>/dev/null | awk '{print $1}' | tr -d 'G')
    if ! [[ "$size_gb" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo "0"
    else
        echo "$size_gb"
    fi
}

is_disk_almost_full() {
    local disk="$1"
    local simulated_freed_space=${2:-0}
    local current_free_space
    current_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
    if ! [[ "$current_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then current_free_space=0; fi
    if ! [[ "$simulated_freed_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then simulated_freed_space=0; fi
    local comparison
    comparison=$(awk -v cur="$current_free_space" -v sim="$simulated_freed_space" -v thold="$THRESHOLD_GB" 'BEGIN { print (cur + sim < thold) }')
    if [[ "$comparison" -eq 1 ]];
    then
        return 0
    else
        return 1
    fi
}

find_target_disk() {
    local source_disk="$1"
    local best_disk=""
    local max_free_space=0
    while IFS= read -r line;
    do
        local disk_path
        local free_space_gb
        disk_path=$(echo "$line" | awk '{print $NF}')
        free_space_gb=$(echo "$line" | awk '{print $4}' | tr -d 'G')
        if ! [[ "$free_space_gb" =~ ^[0-9]+([.][0-9]+)?$ ]]; then continue; fi
        if [[ "$disk_path" == "$source_disk" ]];
        then
            continue
        fi
        if is_disk_excluded "$disk_path";
        then
            continue
        fi
        local is_greater
        is_greater=$(awk -v f1="$free_space_gb" -v f2="$max_free_space" 'BEGIN { print (f1 > f2) }')
        if [ "$is_greater" -eq 1 ];
        then
            max_free_space=$free_space_gb
            best_disk=$disk_path
        fi
    done < <(df -BG | grep '/mnt/disk[0-9]\+')
    echo "$best_disk"
}

move_folder_rsync() {
    local source_path="$1"
    local target_dir="$2"
    local source_folder_name
    source_folder_name=$(basename "$source_path")
    local full_target_path="$target_dir/$source_folder_name"
    LAST_MOVE_SIZE_GB=0
    if [[ ! -d "$target_dir" ]]; then
        log_message "Creating target directory: $target_dir"
        if [ "$DRY_RUN" = "false" ];
        then
            mkdir -p "$target_dir"
            chown nobody:users "$target_dir"
        fi
    fi
    local rsync_cmd="rsync -aH --remove-source-files \"$source_path/\" \"$full_target_path/\""
    if [ "$DRY_RUN" = "true" ];
    then
        local folder_size_gb
        folder_size_gb=$(get_folder_size_gb "$source_path")
        log_message "[DRY RUN] Would move: '$source_path' ($folder_size_gb GB) to '$full_target_path'"
        log_message "[DRY RUN] Would execute: $rsync_cmd"
        LAST_MOVE_SIZE_GB=$folder_size_gb
        return 0
    fi
    log_message "Preparing to move: '$source_path' to '$full_target_path'"
    log_message "Executing: $rsync_cmd"
    if eval "$rsync_cmd";
    then
        log_message "Successfully moved '$source_path' to '$full_target_path'"
        rm -rf "$source_path"
        return 0
    else
        log_message "ERROR: rsync failed to move '$source_path'. See rsync output above."
        send_notification "ERROR: rsync failed to move '$source_path'."
        return 1
    fi
}

# --- Log File Setup and Execution Redirection ---
# Ensure the log directory and file exist before any output.
mkdir -p "$(dirname "$LOG_FILE")"
touch "$LOG_FILE"

# Redirect all subsequent output (stdout & stderr) to be appended to the log file,
# while also passing it through to the original stdout (for the UI on manual runs).
exec > >(tee -a "$LOG_FILE") 2>&1

# --- Main Execution ---
log_message "--- Disk Space Management script starting ---"
if [ "$DRY_RUN" = "true" ];
then
    START_MESSAGE="Dry run started. No files will be moved."
    log_message "*** DRY RUN MODE ENABLED *** No files will be moved."
else
    START_MESSAGE="Script run started."
fi
send_notification "Disk Space Management - $START_MESSAGE"

mounted_disks=$(df | grep '/mnt/disk[0-9]\+' | awk '{print $NF}' | sort)
for disk in $mounted_disks;
do
    if is_disk_excluded "$disk"; then
        log_message "Skipping excluded disk: $disk"
        continue
    fi
    if ! is_disk_almost_full "$disk"; then
        continue
    fi
    initial_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
     if ! [[ "$initial_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        initial_free_space="N/A"
    fi
    log_message "Disk $disk is below the ${THRESHOLD_GB}GB threshold (initial space: ${initial_free_space}GB). Planning moves..."
    
    item_list=$(
        for dir in "${MOVIE_DIRS_ARRAY[@]}"; do
            find "$disk/$dir" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null | while IFS= read -r -d '' folder; do
                echo "1|0|$folder|$dir"
            done
        done
        for dir in "${TV_SHOW_DIRS_ARRAY[@]}"; do
            find "$disk/$dir" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null | while IFS= read -r -d '' folder; do
                seasons_count=$(find "$folder" -mindepth 1 -maxdepth 1 -type d | wc -l)
                echo "2|$seasons_count|$folder|$dir"
            done
        done
    )

    sorted_item_list=$(echo "$item_list" | sort -t'|' -k1,1n -k2,2n)
    
    if [[ -z "$sorted_item_list" ]];
    then
        log_message "No movable files found on $disk."
        continue
    fi
    
    simulated_freed_space_gb=0
    target_disk=$(find_target_disk "$disk")
    
    if [[ -z "$target_disk" ]];
    then
        log_message "No suitable target disk found for source $disk."
        continue
    fi
    log_message "Best target disk found: $target_disk"

    while IFS='|' read -r priority sort_key folder_path target_base_dir; do
        if ! is_disk_almost_full "$disk" "$simulated_freed_space_gb";
        then
            current_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
            if ! [[ "$current_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then current_free_space=0; fi
            effective_space=$(awk -v cur="$current_free_space" -v sim="$simulated_freed_space_gb" 'BEGIN { print cur + sim }')
            log_message "Disk $disk is now above the threshold (effective space: ${effective_space}GB). Halting moves for this disk."
            break
        fi
        if [[ -z "$folder_path" ]];
        then continue; fi
        if [[ "$priority" -eq 2 ]];
        then
             log_message "Found TV show: '$(basename "$folder_path")' with $sort_key seasons."
        fi
        if [ "$DRY_RUN" = "true" ];
        then
            move_folder_rsync "$folder_path" "$target_disk/$target_base_dir"
            size_moved=$LAST_MOVE_SIZE_GB
            simulated_freed_space_gb=$(awk -v cur="${simulated_freed_space_gb:-0}" -v moved="${size_moved:-0}" 'BEGIN { print cur + moved }')
        else
            if ! move_folder_rsync "$folder_path" "$target_disk/$target_base_dir"; then
                log_message "A real move failed. Stopping further moves from $disk."
                break
            fi
        fi
    done <<< "$sorted_item_list"
done
log_message "--- Disk Space Management script finished ---"
send_notification "Disk Space Management script run finished."
]]>
</INLINE>
</FILE>

<!--
  INITIAL SETTINGS FILE CREATION
  This script creates a default settings file, but ONLY if one doesn't already exist.
-->
<EXEC>
if [ ! -f "&plugdir;/settings.cfg" ]; then
  /bin/mkdir -p &plugdir;
  (
    echo 'THRESHOLD_GB="50"'
    echo 'DRY_RUN="true"'
    echo 'LOG_FILE="/var/log/diskspacemanagement.log"'
    echo 'MOVIE_DIRS="media/Movies"'
    echo 'TV_SHOW_DIRS="media/TV"'
    echo 'EXCLUDED_DISKS=""'
    echo 'NOTIFY="true"'
    echo 'CRON_SCHEDULE="0 3 * * *"'
  ) > &plugdir;/settings.cfg
fi
</EXEC>

<!--
  POST-INSTALL SCRIPT
  This script runs after all the files are installed.
-->
<FILE Run="/bin/bash">
<INLINE>
echo
echo "----------------------------------------------------"
echo " &name; version &version; has been installed."
echo " To configure, go to Settings > &name;"
echo "----------------------------------------------------"
echo
</INLINE>
</FILE>

<!--
  PLUGIN REMOVAL SCRIPT
  This script is executed when the plugin is removed.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
echo "Uninstalling &name;..."
# Remove the main plugin directory from RAM
rm -rf /usr/local/emhttp/plugins/&name;
# Remove the plugin's cron file
rm -f /boot/config/plugins/dynamix/&name;.cron
# Force dynamix to rebuild the crontab
update_cron
echo "&name; has been successfully removed."
</INLINE>
</FILE>

</PLUGIN>
