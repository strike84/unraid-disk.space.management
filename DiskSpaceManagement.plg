<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name "DiskSpaceManagement">
<!ENTITY author "strike">
<!ENTITY version "2024.06.28">
<!ENTITY launch "Settings/DiskSpaceManagement">
<!ENTITY plugdir "/boot/config/plugins/&name;">
<!ENTITY github "strike84/unraid-disk.space.management">
]>
<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="https://raw.githubusercontent.com/&github;/main/&name;.plg">

<!-- SOURCE FILES -->
<FILE Name="/usr/local/emhttp/plugins/&name;/DiskSpaceManagement.php" Mode="0770">
<INLINE>
<![CDATA[
<?php
define('PLUGIN_NAME', 'DiskSpaceManagement');
define('PLUGIN_VERSION', '2024.06.28');
define('CONFIG_FILE', '/boot/config/plugins/' . PLUGIN_NAME . '/settings.cfg');
define('LOG_FILE_PATH_CONFIG_KEY', 'LOG_FILE');

function get_config_val($key, $default = '') {
    if (!file_exists(CONFIG_FILE)) {
        return $default;
    }
    $config = parse_ini_file(CONFIG_FILE);
    return isset($config[$key]) ? $config[$key] : $default;
}

function get_log_file() {
    return get_config_val(LOG_FILE_PATH_CONFIG_KEY, '/var/log/diskspacemanagement.log');
}

// Handle AJAX log request
if (isset($_GET['action']) && $_GET['action'] == 'get_log') {
    header('Content-Type: text/plain');
    $logFile = get_log_file();
    if (file_exists($logFile)) {
        echo file_get_contents($logFile);
    } else {
        echo "Log file not found. Please run the script at least once.";
    }
    exit();
}
?>
<html>
<head>
    <title><?= PLUGIN_NAME ?></title>
    <style>
        .log-container {
            background-color: #2b2b2b;
            color: #f1f1f1;
            font-family: monospace;
            white-space: pre-wrap;
            word-wrap: break-word;
            padding: 15px;
            border-radius: 5px;
            height: 500px;
            overflow-y: scroll;
            border: 1px solid #444;
        }
    </style>
</head>
<body>

<!-- Page Content -->
<div id="diskspacemanagement">
    <?php include "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/includes/header.php"; ?>
    <form id="diskspacemanagement_form" method="post" action="/plugins/dynamix/update.php" target="progress_iframe">
        <input type="hidden" name="name" value="<?= PLUGIN_NAME ?>">
        <input type="hidden" name="source" value="/usr/local/emhttp/plugins/<?= PLUGIN_NAME ?>/scripts/update_cfg.php">

        <!-- TABS -->
        <div class="tab-view">
            <div id="tab-settings" class="tab" style="display: block;">
                 <?php include "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/includes/settings.php"; ?>
            </div>
            <div id="tab-logs" class="tab" style="display: none;">
                 <?php include "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/includes/logs.php"; ?>
            </div>
            <div id="tab-about" class="tab" style="display: none;">
                 <?php include "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/includes/about.php"; ?>
            </div>
        </div>
        
        <div id="buttons" style="margin-top: 20px;">
            <input type="button" value="Run Script" onclick="runScript()">
            <input type="submit" value="Apply" name="submit">
        </div>
    </form>
</div>

<div id="progress_iframe_container" style="display:none; margin-top:20px;">
    <iframe name="progress_iframe" style="width:100%; height: 500px; border: 1px solid #ccc; border-radius: 5px;"></iframe>
</div>

<script>
function showTab(tabName) {
    // Hide all tabs
    var tabs = document.querySelectorAll('.tab');
    tabs.forEach(function(tab) {
        tab.style.display = 'none';
    });

    // Show the selected tab
    document.getElementById(tabName).style.display = 'block';

    // Update active state of buttons
    var buttons = document.querySelectorAll('.tab-button');
    buttons.forEach(function(button) {
        button.classList.remove('active');
    });
    document.querySelector('button[onclick="showTab(\'' + tabName + '\')"]').classList.add('active');
}

function runScript() {
    document.getElementById('progress_iframe_container').style.display = 'block';
    document.getElementsByName('progress_iframe')[0].src = '/usr/local/emhttp/plugins/<?= PLUGIN_NAME ?>/scripts/run_script.php';
    setTimeout(updateLog, 2000); // Give script time to start and create log
}

function updateLog() {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', '/usr/local/emhttp/plugins/<?= PLUGIN_NAME ?>/DiskSpaceManagement.php?action=get_log', true);
    xhr.onload = function () {
        if (xhr.status === 200) {
            var logContent = document.getElementById('log-content');
            logContent.textContent = xhr.responseText;
            logContent.scrollTop = logContent.scrollHeight;
        }
    };
    xhr.send();
}

// Auto-update log every 5 seconds if log tab is visible
setInterval(function() {
    if (document.getElementById('tab-logs').style.display === 'block') {
        updateLog();
    }
}, 5000);

// Initial setup on page load
document.addEventListener('DOMContentLoaded', function() {
    showTab('tab-settings');
    updateLog(); // Initial log load
});
</script>

</body>
</html>
]]>
</INLINE>
</FILE>

<FILE Name="&plugdir;/settings.cfg" Mode="0660">
<INLINE>
<![CDATA[
; Disk Space Management Settings
THRESHOLD_GB="100"
DRY_RUN="true"
LOG_FILE="/var/log/diskspacemanagement.log"
MOVIE_DIRS="media/Movies"
TV_SHOW_DIRS="media/TV"
EXCLUDED_DISKS="/mnt/disk1,/mnt/cache"
CRON_SCHEDULE="0 3 * * *"
NOTIFY="true"
]]>
</INLINE>
</FILE>

<!-- Main Script -->
<FILE Name="&plugdir;/scripts/disk_space_management.sh" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash

# ==============================================================================
# Unraid Disk Space Management Script
# Version: 2.16 (Plugin Adapted)
# ==============================================================================

# --- Configuration ---
CONFIG_FILE="/boot/config/plugins/DiskSpaceManagement/settings.cfg"

if [ -f "$CONFIG_FILE" ]; then
    # Sanitize and source the config file to prevent command injection
    CLEAN_CONFIG=$(grep -E '^[a-zA-Z0-9_]+="[^"]*"' "$CONFIG_FILE")
    eval "$CLEAN_CONFIG"
fi

# Set defaults if variables are not in the config
THRESHOLD_GB=${THRESHOLD_GB:-100}
DRY_RUN=${DRY_RUN:-true}
LOG_FILE=${LOG_FILE:-/var/log/diskspacemanagement.log}
MOVIE_DIRS=${MOVIE_DIRS:-"media/Movies"}
TV_SHOW_DIRS=${TV_SHOW_DIRS:-"media/TV"}
EXCLUDED_DISKS=${EXCLUDED_DISKS:-"/mnt/disk1"}
NOTIFY=${NOTIFY:-true}

# Reformat arrays from config
IFS=',' read -r -a MOVIE_DIRS_ARRAY <<< "$MOVIE_DIRS"
IFS=',' read -r -a TV_SHOW_DIRS_ARRAY <<< "$TV_SHOW_DIRS"
IFS=',' read -r -a EXCLUDED_DISKS_ARRAY <<< "$EXCLUDED_DISKS"

# --- Script Logic ---
LAST_MOVE_SIZE_GB=0
mkdir -p "$(dirname "$LOG_FILE")"

log_message() {
    local message
    message="$(date +'%Y-%m-%d %H:%M:%S') - $1"
    echo "$message"
    echo "$message" >> "$LOG_FILE"
}

send_notification() {
    if [ "$NOTIFY" = "true" ]; then
        /usr/local/emhttp/plugins/dynamix/scripts/notify -s "Disk Space Management" -d "$1"
    fi
}

# Function to check if a disk is in the excluded list
is_disk_excluded() {
    local disk_to_check="$1"
    local normalized_disk_to_check="${disk_to_check#/}"

    for excluded in "${EXCLUDED_DISKS_ARRAY[@]}"; do
        local normalized_excluded="${excluded#/}"
        if [[ "$normalized_disk_to_check" == "$normalized_excluded" ]]; then
            return 0 # 0 means true (is excluded)
        fi
    done
    return 1 # 1 means false (is not excluded)
}

# Function to get the size of a folder in GB
get_folder_size_gb() {
    local folder_path="$1"
    local size_gb
    size_gb=$(du -sBG "$folder_path" 2>/dev/null | awk '{print $1}' | tr -d 'G')
    if ! [[ "$size_gb" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        echo "0"
    else
        echo "$size_gb"
    fi
}

# Function to check if a disk is below the free space threshold
is_disk_almost_full() {
    local disk="$1"
    local simulated_freed_space=${2:-0}
    local current_free_space
    current_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
    
    # Sanitize inputs for awk
    if ! [[ "$current_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then current_free_space=0; fi
    if ! [[ "$simulated_freed_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then simulated_freed_space=0; fi

    local comparison
    comparison=$(awk -v cur="$current_free_space" -v sim="$simulated_freed_space" -v thold="$THRESHOLD_GB" 'BEGIN { print (cur + sim < thold) }')

    if [[ "$comparison" -eq 1 ]]; then
        return 0 # Is almost full
    else
        return 1 # Is not almost full
    fi
}

# Function to find the best target disk (most space, not excluded, not the source)
find_target_disk() {
    local source_disk="$1"
    local best_disk=""
    local max_free_space=0

    while IFS= read -r line; do
        local disk_path
        local free_space_gb
        disk_path=$(echo "$line" | awk '{print $NF}')
        free_space_gb=$(echo "$line" | awk '{print $4}' | tr -d 'G')
        if ! [[ "$free_space_gb" =~ ^[0-9]+([.][0-9]+)?$ ]]; then continue; fi

        if [[ "$disk_path" == "$source_disk" ]]; then
            continue
        fi

        if is_disk_excluded "$disk_path"; then
            continue
        fi
        
        local is_greater
        is_greater=$(awk -v f1="$free_space_gb" -v f2="$max_free_space" 'BEGIN { print (f1 > f2) }')
        if [ "$is_greater" -eq 1 ]; then
            max_free_space=$free_space_gb
            best_disk=$disk_path
        fi
    done < <(df -BG | grep '/mnt/disk[0-9]\+')

    echo "$best_disk"
}

# Function to move a folder using rsync.
move_folder_rsync() {
    local source_path="$1"
    local target_dir="$2"
    local source_folder_name
    source_folder_name=$(basename "$source_path")
    local full_target_path="$target_dir/$source_folder_name"
    
    LAST_MOVE_SIZE_GB=0

    if [[ ! -d "$target_dir" ]]; then
        log_message "Creating target directory: $target_dir"
        if [ "$DRY_RUN" = "false" ]; then
            mkdir -p "$target_dir"
            chown nobody:users "$target_dir"
        fi
    fi
    
    local rsync_cmd="rsync -aH --info=progress2 --remove-source-files \"$source_path/\" \"$full_target_path/\""

    if [ "$DRY_RUN" = "true" ]; then
        local folder_size_gb
        folder_size_gb=$(get_folder_size_gb "$source_path")
        log_message "[DRY RUN] Would move: '$source_path' ($folder_size_gb GB) to '$full_target_path'"
        log_message "[DRY RUN] Would execute: $rsync_cmd"
        LAST_MOVE_SIZE_GB=$folder_size_gb
        return 0
    fi

    log_message "Preparing to move: '$source_path' to '$full_target_path'"
    log_message "Executing: $rsync_cmd"
    if eval "$rsync_cmd"; then
        log_message "Successfully moved '$source_path' to '$full_target_path'"
        rm -rf "$source_path"
        return 0
    else
        log_message "ERROR: rsync failed to move '$source_path'. See rsync output above."
        send_notification "ERROR: rsync failed to move '$source_path'."
        return 1
    fi
}

# --- Main Execution ---
log_message "--- Disk Space Management script starting ---"
if [ "$DRY_RUN" = "true" ]; then
    log_message "*** DRY RUN MODE ENABLED *** No files will be moved."
    send_notification "Dry run started. No files will be moved."
fi

mounted_disks=$(df | grep '/mnt/disk[0-9]\+' | awk '{print $NF}' | sort)

for disk in $mounted_disks; do
    if is_disk_excluded "$disk"; then
        log_message "Skipping excluded disk: $disk"
        continue
    fi

    if ! is_disk_almost_full "$disk"; then
        continue
    fi
    
    initial_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
     if ! [[ "$initial_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        initial_free_space="N/A"
    fi
    log_message "Disk $disk is below the ${THRESHOLD_GB}GB threshold (initial space: ${initial_free_space}GB). Planning moves..."

    item_list=$(
        for dir in "${MOVIE_DIRS_ARRAY[@]}"; do
             find "$disk/$dir" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null | while IFS= read -r -d '' folder; do
                echo "1|0|$folder|$dir"
            done
        done
        for dir in "${TV_SHOW_DIRS_ARRAY[@]}"; do
            find "$disk/$dir" -mindepth 1 -maxdepth 1 -type d -print0 2>/dev/null | while IFS= read -r -d '' folder; do
                seasons_count=$(find "$folder" -mindepth 1 -maxdepth 1 -type d | wc -l)
                echo "2|$seasons_count|$folder|$dir"
            done
        done
    )

    sorted_item_list=$(echo "$item_list" | sort -t'|' -k1,1n -k2,2n)

    if [[ -z "$sorted_item_list" ]]; then
        log_message "No movable files found on $disk."
        continue
    fi
    
    simulated_freed_space_gb=0
    target_disk=$(find_target_disk "$disk")
    if [[ -z "$target_disk" ]]; then
        log_message "No suitable target disk found for source $disk."
        continue
    fi
    log_message "Best target disk found: $target_disk"

    while IFS='|' read -r priority sort_key folder_path target_base_dir; do
        if ! is_disk_almost_full "$disk" "$simulated_freed_space_gb"; then
            current_free_space=$(df -BG "$disk" 2>/dev/null | awk 'NR==2 {print $4}' | tr -d 'G')
            if ! [[ "$current_free_space" =~ ^[0-9]+([.][0-9]+)?$ ]]; then current_free_space=0; fi
            effective_space=$(awk -v cur="$current_free_space" -v sim="$simulated_freed_space_gb" 'BEGIN { print cur + sim }')
            log_message "Disk $disk is now above the threshold (effective space: ${effective_space}GB). Halting moves for this disk."
            break 
        fi
        
        if [[ -z "$folder_path" ]]; then continue; fi
        
        if [[ "$priority" -eq 2 ]]; then
             log_message "Found TV show: '$(basename "$folder_path")' with $sort_key seasons."
        fi

        if [ "$DRY_RUN" = "true" ]; then
            move_folder_rsync "$folder_path" "$target_disk/$target_base_dir"
            size_moved=$LAST_MOVE_SIZE_GB
            simulated_freed_space_gb=$(awk -v cur="${simulated_freed_space_gb:-0}" -v moved="${size_moved:-0}" 'BEGIN { print cur + moved }')
        else
            if ! move_folder_rsync "$folder_path" "$target_disk/$target_base_dir"; then
                log_message "A real move failed. Stopping further moves from $disk."
                break
            fi
        fi
    done <<< "$sorted_item_list"
done

log_message "--- Disk Space Management script finished ---"
send_notification "Disk Space Management script run finished."

]]>
</INLINE>
</FILE>

<!-- Cron File -->
<FILE Name="/etc/cron.d/DiskSpaceManagement" Mode="0644">
<INLINE>
# This file is dynamically updated by update_cfg.php when you click Apply.
</INLINE>
</FILE>

<!-- PHP Include Files -->
<FILE Name="&plugdir;/includes/header.php" Mode="0644">
<INLINE>
<![CDATA[
<div style="display:flex; justify-content:space-between; align-items:center;">
    <div>
        <h2>Disk Space Management <span style="font-size: 0.8em; color: #999;"><?= PLUGIN_VERSION ?></span></h2>
        <p>Automated disk space management for your media library.</p>
    </div>
    <div>
        <img src="/usr/local/emhttp/plugins/<?= PLUGIN_NAME ?>/plugin-icon.png" style="height:64px; width:auto;">
    </div>
</div>
<div style="margin-bottom: 20px;">
    <button type="button" class="tab-button active" onclick="showTab('tab-settings')">Settings</button>
    <button type="button" class="tab-button" onclick="showTab('tab-logs')">Logs</button>
    <button type="button" class="tab-button" onclick="showTab('tab-about')">About</button>
</div>
]]>
</INLINE>
</FILE>

<FILE Name="&plugdir;/includes/settings.php" Mode="0644">
<INLINE>
<![CDATA[
<?php
// Load current settings
$settingsFile = '/boot/config/plugins/DiskSpaceManagement/settings.cfg';
$settings = file_exists($settingsFile) ? parse_ini_file($settingsFile) : [];
function get_setting($key, $default) {
    global $settings;
    return isset($settings[$key]) ? htmlspecialchars($settings[$key]) : $default;
}
?>
<h3>Main Settings</h3>
<dl class="settings">
    <dt>Free Space Threshold (GB)</dt>
    <dd><input type="number" class="form-control" name="THRESHOLD_GB" value="<?= get_setting('THRESHOLD_GB', '100') ?>" style="width: 100px;"></dd>
    <dt>Dry Run</dt>
    <dd>
        <select name="DRY_RUN" class="form-control" style="width: 250px;">
            <option value="true" <?= get_setting('DRY_RUN', 'true') == 'true' ? 'selected' : '' ?>>Enabled (Recommended for testing)</option>
            <option value="false" <?= get_setting('DRY_RUN', 'true') == 'false' ? 'selected' : '' ?>>Disabled (Normal operation)</option>
        </select>
    </dd>
    <dt>Send Notifications</dt>
    <dd>
        <select name="NOTIFY" class="form-control" style="width: 100px;">
            <option value="true" <?= get_setting('NOTIFY', 'true') == 'true' ? 'selected' : '' ?>>Yes</option>
            <option value="false" <?= get_setting('NOTIFY', 'true') == 'false' ? 'selected' : '' ?>>No</option>
        </select>
    </dd>
</dl>

<h3>Path &amp; Disk Settings</h3>
<dl class="settings">
    <dt>Log File Path</dt>
    <dd><input type="text" class="form-control" name="LOG_FILE" value="<?= get_setting('LOG_FILE', '/var/log/diskspacemanagement.log') ?>" style="width: 400px;"></dd>
    <dt>Movie Library Paths</dt>
    <dd><input type="text" class="form-control" name="MOVIE_DIRS" value="<?= get_setting('MOVIE_DIRS', 'media/Movies') ?>" style="width: 400px;"><br><small>Comma-separated, relative to disk root (e.g., media/Movies,media/4K_Movies)</small></dd>
    <dt>TV Show Library Paths</dt>
    <dd><input type="text" class="form-control" name="TV_SHOW_DIRS" value="<?= get_setting('TV_SHOW_DIRS', 'media/TV') ?>" style="width: 400px;"><br><small>Comma-separated, relative to disk root.</small></dd>
    <dt>Excluded Disks</dt>
    <dd><input type="text" class="form-control" name="EXCLUDED_DISKS" value="<?= get_setting('EXCLUDED_DISKS', '/mnt/disk1,/mnt/cache') ?>" style="width: 400px;"><br><small>Comma-separated list of full disk paths to exclude.</small></dd>
</dl>

<h3>Scheduler</h3>
<dl class="settings">
    <dt>Cron Schedule</dt>
    <dd><input type="text" class="form-control" name="CRON_SCHEDULE" value="<?= get_setting('CRON_SCHEDULE', '0 3 * * *') ?>" style="width: 200px;"><br><small>Standard cron format. Example: '0 3 * * *' for 3 AM daily.</small></dd>
</dl>
]]>
</INLINE>
</FILE>

<FILE Name="&plugdir;/includes/logs.php" Mode="0644">
<INLINE>
<![CDATA[
<h3>Real-time Log</h3>
<p>This log shows the output from the last script run. It will auto-refresh every 5 seconds while this tab is active.</p>
<div id="log-content" class="log-container">
    Loading log...
</div>
]]>
</INLINE>
</FILE>

<FILE Name="&plugdir;/includes/about.php" Mode="0644">
<INLINE>
<![CDATA[
<h3>About Disk Space Management</h3>
<p>This plugin was generated by Gemini to automate disk space management based on a user-provided script.</p>
<p><strong>Version:</strong> <?= PLUGIN_VERSION ?></p>
<p><strong>Features:</strong></p>
<ul>
    <li>Moves Movies and TV Shows from full disks to disks with more space.</li>
    <li>Prioritizes moving smaller TV shows first for efficiency.</li>
    <li>Configurable via the Unraid WebUI.</li>
    <li>Real-time logging and cron-based scheduling.</li>
</ul>
]]>
</INLINE>
</FILE>

<!-- Support Scripts -->
<FILE Name="&plugdir;/scripts/update_cfg.php" Mode="0770">
<INLINE>
<![CDATA[
<?php
define('PLUGIN_NAME', 'DiskSpaceManagement');
define('CONFIG_FILE', '/boot/config/plugins/' . PLUGIN_NAME . '/settings.cfg');
$new_config = $_POST;
unset($new_config['name']);
unset($new_config['source']);
unset($new_config['submit']);

$cfg_content = "";
foreach($new_config as $key => $value) {
    // Basic sanitization
    $clean_value = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
    $cfg_content .= $key . '="' . $clean_value . '"' . PHP_EOL;
}

file_put_contents(CONFIG_FILE, $cfg_content);

// Dynamically create the cron file content
$cron_schedule = isset($new_config['CRON_SCHEDULE']) ? $new_config['CRON_SCHEDULE'] : '0 3 * * *';
$log_file = isset($new_config['LOG_FILE']) ? $new_config['LOG_FILE'] : '/var/log/diskspacemanagement.log';
$script_path = "/usr/local/emhttp/plugins/" . PLUGIN_NAME . "/scripts/disk_space_management.sh";
$cron_content = "$cron_schedule root $script_path &>> $log_file" . PHP_EOL;

file_put_contents("/etc/cron.d/" . PLUGIN_NAME, $cron_content);
chmod("/etc/cron.d/" . PLUGIN_NAME, 0644);

// Tell dynamix to rescan cron files
exec("update_cron");

echo "Settings updated successfully.";
?>
]]>
</INLINE>
</FILE>

<FILE Name="&plugdir;/scripts/run_script.php" Mode="0770">
<INLINE>
<![CDATA[
<?php
header('Content-Type: text/plain');
echo "Starting Disk Space Management script...\n\n";
flush();
ob_flush();
// Ensure script is executable
chmod("/usr/local/emhttp/plugins/DiskSpaceManagement/scripts/disk_space_management.sh", 0770);
passthru("/usr/local/emhttp/plugins/DiskSpaceManagement/scripts/disk_space_management.sh");
echo "\n\nScript finished.";
?>
]]>
</INLINE>
</FILE>

<!-- Icon -->
<FILE Name="/usr/local/emhttp/plugins/&name;/plugin-icon.png" Mode="0644">
<SOURCE>https://raw.githubusercontent.com/&github;/main/plugin-icon.png</SOURCE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/&name;/page.php" Mode="0755">
<INLINE>
<![CDATA[
<?php
// This file is a stub to make the plugin appear in the settings menu
require_once("/usr/local/emhttp/plugins/DiskSpaceManagement/DiskSpaceManagement.php");
?>
]]>
</INLINE>
</FILE>

<!-- POST INSTALL SCRIPT -->
<EXEC>
echo "----------------------------------------------------"
echo " &name; has been installed."
echo " To configure, go to Settings > &name;"
echo "----------------------------------------------------"
</EXEC>
</PLUGIN>
